from django.shortcuts import get_object_or_404,render
from django.http import HttpResponse
from django.views.generic import View
from django.views.generic.edit import FormView
from django.http import HttpResponseRedirect
from .forms import PredictForm
import numpy as np
import pandas as pd
from urllib.request import urlopen
from urllib import parse
from urllib.request import Request
from urllib.error import HTTPError
from bs4 import BeautifulSoup
import json
from datetime import datetime as dt
import joblib
from konlpy.tag import Okt
# lightgbm 모델
import lightgbm as lgb
from lightgbm import LGBMClassifier, plot_importance
# Create your views here.
class PredictFormView(View):
    
    tokenizer = Okt()
    form_class = PredictForm
    template_name = 'anipred/elements.html'
    color_map = {
        '흰색':['흰색','크림','햐양','흰','흰샥','백색','화이트','하양','하얀색','희색','벡','벡색','벡섹','백구','힌색','횐색','휜색','횐','흰섹','힁색','힁','흰샛','화이','배색','진도견'],
        '검정색':['검정','검덩','검졍','검정색','검은색','흑','블랙','흑색','검색','흑갈색','다크','검은빛','검황','검회','검점','까만색','검혼','불랙','검절','겅','검종'],
        '갈색':['갈색','걀색','고둥','갈','브라운','연가','밤색','고동색','초코','고동','밤색','초콜릿','쵸코','흙','흙색','갈섹','암갈색','진밤','커피','초코렛','다갈색','칡색','걸색','초콜렛','동색','강색','칡','갈샥','회걀색','간색'],
        '회색':['회색','진회색','그레이','재색','실버','연회색','쥐색','쥐','잿빛','진회','회색빛','회','회갈색','은색','은회색','은','회검','은빛','길색','연회','잿색','철색','러시안블루','차콜'],
        '황색':['황색','환색','확색','황','황토색','황토','담황색','황백색','보리','누런빛','누런색','누런','누렁','누렁색','진도','황검','회황색','항색','황회','황섹','황새'],
        '노랑색':['노랑','노런','노랑색','노','노란색','연노랑','노라','옐로','노란빛','레몬','연노','진노','옐로우','노검','노혼','노란섹','노랭','누렇색','치즈'],
        '주황색':['주황색','주황','누렁이','오렌지색','오렌지','주','연주황색','연주황','호랑','붉은색','레드','적색','빨간색','홍','붉은빛','홍색','빨','빨강','정색','레즈'],
        '금색':['금색','골드','골든','순금','금','금은','황금','금빛'],
        '살구색':['살구색','살색','살구','분홍','분홍색','핑크','핑크색','연분홍'],
        '고등어':['고등어','고등'],
        '베이지':['베이지','베이지색','베이직'],
        '아이보리':['아이보리','크림'],
        '삼색':['삼색'],
        '턱시도':['턱','시도'],
        '카오스':['카오스']
    }
    breed = {
    '믹스견' : ['믹스견','믹스','혼합','기타','잡종','잡종견','들개','재래종','혼종','혼혈','모름'],
    '한국 고양이' : ['고양이','한국','코숏','기타','고등어','치즈','혼종',
                '턱시도','시도','턱','잡종','삼색','태비','젖소','들고양이','잡종',
                '코리안','야생고양이','길','모름','코쇽','무늬','콧숏','미상',
                '믹스견','혼','알수없음','추정', '한국 고양이','야생', '쇼컷']
    }
    breed_map= {'믹스견': 0, '품종견': 1, '한국 고양이': 2, '품종묘': 3, '품종 믹스묘': 4, '품종 믹스견': 5}
    color_dict = {'흰색': 0, 'unknown': 1, '갈색': 2, '검정색': 3, '황색': 4, '황색 검정색 흰색': 5, '검정색 흰색': 6, '흰색 검정색': 7, '노랑색': 8, '검정색 갈색': 9, '흰색 갈색': 10, '아이보리': 11, '흰색 아이보리 흰색': 12, '검정색 갈색 흰색': 13, '검정색 흰색 턱시도': 14, '회색 갈색': 15, '회색': 16, '삼색': 17, '검정색 황색': 18, '갈색 흰색': 19, '흰색 황색': 20, '베이지 흰색': 21, '검정색 베이지': 22, '베이지': 23, '검정색 회색': 24, '흰색 아이보리': 25, '갈색 검정색': 26, '갈색 검정색 흰색': 27, '회색 흰색': 28, '턱시도 턱시도': 29, '고등어': 30, '황색 흰색': 31, '노랑색 흰색': 32, '흰색 노랑색': 33, '황색 갈색': 34, '흰색 갈색 검정색': 35, '검정색 흰색 황색': 36, '검정색 흰색 갈색': 37, '황색 검정색': 38, '흰색 베이지': 39, '흰색 흰색': 40, '갈색 아이보리': 41, '살구색': 42, '금색': 43, '검정색 흰색 회색': 44, '아이보리 갈색': 45, '흰색 검정색 갈색': 46, '흰색 황색 검정색': 47, '검정색 노랑색': 48, '흰색 아이보리 검정색': 49, '흰색 회색': 50, '노랑색 노랑색': 51, '흰색 회색 검정색': 52, '갈색 흰색 검정색': 53, '검정색 황색 흰색': 54, '베이지 갈색': 55, '금색 갈색': 56, '회색 검정색': 57, '황색 회색': 58, '검정색 회색 갈색': 59, '갈색 흰색 아이보리': 60, '갈색 회색': 61, '베이지 검정색': 62, '흰색 검정색 회색': 63, '황색 흰색 검정색': 64, '검정색 금색': 65, '주황색 흰색 아이보리': 66, '검정색 금색 갈색': 67, '카오스': 68, '흰색 흰색 아이보리': 69, '삼색 노랑색': 70, '회색 황색': 71, '검정색 흰색 황색 흰색': 72, '갈색 노랑색 흰색': 73, '흰색 아이보리 갈색 검정색': 74, '주황색': 75, '흰색 회색 갈색': 76, '회색 황색 회색': 77, '검정색 노랑색 흰색': 78, '검정색 흰색 노랑색': 79, '흰색 검정색 노랑색': 80, '갈색 회색 검정색': 81, '황색 흰색 황색': 82, '흰색 아이보리 황색': 83, '회색 노랑색': 84, '황색 갈색 갈색 흰색': 85, '턱시도 턱시도 검정색 흰색': 86, '검정색 흰색 턱시도 턱시도': 87, '검정색 회색 금색': 88, '흰색 노랑색 갈색': 89, '흰색 노랑색 회색': 90, '금색 회색': 91, '회색 회색': 92, '회색 검정색 갈색': 93, '갈색 검정색 삼색': 94, '흰색 황색 회색 검정색': 95, '노랑색 흰색 아이보리': 96, '카오스 노랑색': 97, '주황색 흰색': 98, '노랑색 회색': 99, '검정색 갈색 회색': 100, '흰색 황색 갈색': 101, '갈색 갈색': 102, '노랑색 검정색': 103, '노랑색 노랑색 노랑색': 104, '검정색 회색 흰색': 105, '황색 흰색 검정색 갈색': 106, '흰색 검정색 갈색 흰색 갈색': 107, '흰색 검정색 황색': 108, '흰색 아이보리 갈색': 109, '삼색 고등어': 110, '황색 갈색 주황색': 111, '갈색 황색': 112, '검정색 황색 갈색': 113, '검정색 턱시도 턱시도': 114, '아이보리 회색': 115, '흰색 흰색 아이보리 회색': 116, '회색 베이지 흰색': 117, '황색 갈색 흰색': 118, '검정색 아이보리': 119, '검정색 주황색 흰색': 120, '금색 검정색': 121, '검정색 회색 노랑색': 122, '회색 금색': 123, '검정색 갈색 흰색 회색': 124, '흰색 주황색': 125, '회색 흰색 갈색': 126, '검정색 흰색 아이보리': 127, '회색 검정색 흰색': 128, '흰색 갈색 황색 갈색': 129, '갈색 회색 흰색': 130, '흰색 노랑색 검정색': 131, '황색 흰색 아이보리': 132, '갈색 삼색': 133, '황색 아이보리': 134, '검정색 검정색 흰색': 135, '베이지 회색': 136, '아이보리 베이지': 137, '고등어 흰색': 138, '회색 흰색 아이보리': 139, '갈색 흰색 아이보리 흰색': 140, '검정색 흰색 아이보리 흰색 갈색': 141, '흰색 살구색 주황색': 142, '턱시도': 143, '삼색 갈색 검정색 흰색': 144, '회색 흰색 검정색': 145, '고등어 회색': 146, '회색 황색 갈색': 147, '갈색 노랑색': 148, '회색 노랑색 흰색': 149, '노랑색 검정색 흰색': 150, '회색 갈색 검정색': 151, '황색 흰색 갈색 검정색': 152, '검정색 검정색': 153, '갈색 흰색 황색': 154, '검정색 갈색 황색 흰색': 155, '흰색 베이지 검정색': 156, '황색 검정색 갈색': 157, '황색 검정색 갈색 삼색': 158, '황색 갈색 검정색': 159, '흰색 갈색 흰색': 160, '흰색 아이보리 회색': 161, '황색 황색': 162, '황색 갈색 회색': 163, '아이보리 흰색': 164, '금색 회색 검정색': 165, '흰색 아이보리 노랑색': 166, '검정색 회색 황색 갈색': 167, '노랑색 갈색': 168, '흰색 황색 회색': 169, '회색 노랑색 검정색': 170, '삼색 흰색 흰색 검정색': 171, '삼색 갈색': 172, '노랑색 흰색 갈색': 173, '흰색 갈색 회색': 174, '검정색 갈색 흰색 흰색': 175, '갈색 갈색 흰색 갈색': 176, '황색 흰색 흰색 검정색': 177, '갈색 노랑색 검정색': 178, '노랑색 갈색 흰색': 179, '흰색 금색': 180, '주황색 검정색': 181, '주황색 갈색 노랑색': 182, '베이지 흰색 검정색': 183, '흰색 갈색 살구색': 184, '황색 갈색 아이보리': 185, '갈색 검정색 턱시도 턱시도': 186, '흰색 갈색 갈색': 187, '흰색 검정색 베이지': 188, '흰색 아이보리 흰색 검정색': 189, '삼색 노랑색 흰색 검정색': 190, '검정색 회색 베이지': 191, '검정색 흰색 흰색': 192, '흰색 고등어': 193, '삼색 흰색 검정색 갈색': 194, '노랑색 흰색 검정색': 195, '삼색 카오스': 196, '흰색 아이보리 흰색 노랑색': 197, '고등어 검정색': 198, '검정색 갈색 검정색': 199, '검정색 회색 황색': 200, '아이보리 흰색 검정색': 201, '주황색 고등어': 202, '회색 흰색 노랑색': 203, '검정색 주황색': 204, '갈색 흰색 아이보리 검정색': 205, '노랑색 흰색 노랑색': 206, '고등어 회색 검정색': 207, '고등어 회색 갈색 흰색': 208, '회색 베이지': 209, '흰색 살구색': 210, '흰색 갈색 검정색 회색': 211, '검정색 흰색 삼색': 212, '회색 갈색 흰색': 213, '회색 갈색 노랑색': 214, '흰색 검정색 노랑색 흰색': 215, '갈색 흰색 갈색': 216, '회색 아이보리': 217, '흰색 회색 노랑색': 218, '검정색 노랑색 회색': 219, '흰색 주황색 검정색': 220, '노랑색 검정색 흰색 아이보리': 221, '노랑색 흰색 아이보리 흰색': 222, '흰색 검정색 주황색': 223, '금색 회색 회색': 224, '삼색 흰색 검정색 황색': 225, '베이지 검정색 회색': 226, '검정색 갈색 갈색': 227, '금색 베이지': 228, '흰색 아이보리 베이지': 229, '아이보리 황색': 230, '주황색 갈색': 231, '아이보리 검정색': 232, '금색 흰색 아이보리': 233, '회색 살구색': 234, '노랑색 갈색 흰색 검정색': 235, '흰색 갈색 노랑색': 236, '살구색 흰색': 237, '아이보리 흰색 아이보리': 238, '갈색 흰색 흰색 아이보리': 239, '주황색 검정색 갈색 흰색': 240, '흰색 아이보리 금색': 241, '검정색 갈색 노랑색': 242, '노랑색 주황색': 243, '갈색 살구색': 244, '흰색 검정색 노랑색 삼색': 245, '흰색 아이보리 흰색 갈색': 246, '고등어 노랑색': 247, '갈색 흰색 회색': 248, '삼색 검정색': 249, '갈색 검정색 황색': 250, '노랑색 고등어': 251, '회색 고등어': 252, '노랑색 검정색 갈색': 253, '삼색 흰색 검정색 황색 갈색': 254, '노랑색 흰색 아이보리 검정색': 255, '검정색 흰색 고등어': 256, '흰색 검정색 황색 회색': 257, '검정색 흰색 갈색 흰색': 258, '황색 흰색 검정색 흰색': 259, '삼색 흰색 황색 검정색': 260, '검정색 삼색': 261, '황색 갈색 흰색 검정색': 262, '삼색 회색': 263, '황색 베이지': 264, '검정색 검정색 갈색': 265, '검정색 갈색 흰색 아이보리': 266, '노랑색 흰색 삼색': 267, '살구색 검정색': 268, '검정색 황색 검정색': 269, '갈색 회색 흰색 아이보리': 270, '고등어 삼색': 271, '검정색 턱시도 흰색': 272, '갈색 주황색': 273, '갈색 고등어': 274, '노랑색 흰색 흰색 검정색': 275, '흰색 갈색 갈색 검정색': 276, '검정색 흰색 갈색 회색': 277, '노랑색 삼색': 278, '흰색 주황색 갈색': 279, '흰색 황색 흰색': 280, '흰색 흰색 아이보리 노랑색': 281, '흰색 노랑색 금색': 282, '갈색 갈색 검정색': 283, '갈색 흰색 흰색': 284, '검정색 노랑색 회색 흰색': 285, '갈색 갈색 흰색': 286, '흰색 삼색': 287, '검정색 갈색 황색': 288, '검정색 검정색 노랑색': 289, '노랑색 황색': 290, '갈색 황색 흰색': 291, '흰색 검정색 검정색': 292, '흰색 갈색 검정색 살구색': 293, '고등어 갈색': 294, '흰색 주황색 노랑색': 295, '흰색 검정색 흰색 아이보리': 296, '갈색 갈색 노랑색': 297, '갈색 주황색 흰색': 298, '흰색 회색 황색 갈색': 299, '갈색 노랑색 흰색 아이보리': 300, '회색 노랑색 흰색 아이보리': 301, '주황색 회색': 302, '흰색 흰색 아이보리 검정색': 303, '흰색 갈색 검정색 황색': 304, '검정색 회색 회색': 305, '검정색 흰색 갈색 노랑색': 306, '살구색 살구색': 307, '회색 갈색 아이보리 검정색': 308, '흰색 고등어 검정색': 309, '갈색 갈색 갈색': 310, '황색 노랑색': 311, '금색 흰색': 312, '삼색 검정색 갈색 흰색': 313, '노랑색 회색 갈색 검정색': 314, '검정색 노랑색 흰색 아이보리': 315, '흰색 갈색 고등어': 316, '흰색 갈색 황색': 317, '삼색 흰색': 318, '검정색 회색 흰색 아이보리': 319, '살구색 검정색 흰색': 320, '노랑색 흰색 회색': 321, '주황색 검정색 흰색': 322, '갈색 흰색 검정색 흰색': 323, '흰색 갈색 주황색': 324, '흰색 노랑색 삼색': 325, '갈색 흰색 검정색 삼색': 326, '황색 검정색 아이보리': 327, '갈색 갈색 흰색 아이보리': 328, '갈색 흰색 주황색': 329, '검정색 흰색 갈색 검정색 회색': 330, '카오스 삼색': 331, '검정색 갈색 주황색': 332, '회색 검정색 노랑색': 333, '베이지 회색 갈색': 334, '회색 턱시도 턱시도': 335, '흰색 회색 회색': 336, '회색 갈색 노랑색 검정색': 337, '주황색 살구색': 338, '황색 흰색 갈색': 339, '고등어 흰색 아이보리': 340, '노랑색 갈색 흰색 삼색': 341, '검정색 노랑색 갈색': 342, '갈색 황색 검정색': 343, '고등어 검정색 흰색': 344, '노랑색 노랑색 흰색': 345, '검정색 갈색 베이지': 346, '금색 노랑색 흰색 아이보리': 347, '노랑색 흰색 아이보리 갈색': 348, '흰색 황색 황색': 349, '검정색 살구색': 350, '검정색 살구색 흰색': 351, '삼색 고등어 노랑색 흰색': 352, '검정색 흰색 베이지': 353, '갈색 검정색 흰색 아이보리': 354, '갈색 검정색 갈색': 355, '삼색 검정색 갈색 노랑색': 356, '흰색 아이보리 황색 갈색': 357, '주황색 회색 흰색 아이보리': 358, '삼색 황색 흰색': 359, '삼색 흰색 황색': 360, '베이지 노랑색': 361, '삼색 흰색 회색 갈색': 362, '노랑색 황색 흰색': 363, '흰색 갈색 흰색 아이보리': 364, '흰색 아이보리 흰색 회색': 365, '흰색 흰색 아이보리 갈색': 366, '흰색 회색 주황색': 367, '황색 흰색 흰색': 368, '검정색 검정색 흰색 갈색 흰색': 369, '갈색 베이지': 370, '검정색 고등어': 371, '갈색 검정색 검정색': 372, '갈색 주황색 검정색': 373, '흰색 아이보리 갈색 노랑색': 374, '아이보리 갈색 흰색': 375, '흰색 아이보리 주황색 검정색': 376, '검정색 흰색 주황색': 377, '주황색 흰색 아이보리 검정색': 378, '흰색 회색 고등어': 379, '흰색 황색 갈색 갈색': 380, '황색 갈색 검정색 흰색': 381, '흰색 아이보리 갈색 갈색': 382, '턱시도 흰색': 383, '흰색 갈색 검정색 삼색': 384, '갈색 금색': 385, '갈색 검정색 회색': 386, '노랑색 검정색 흰색 회색': 387, '노랑색 흰색 갈색 검정색': 388, '황색 갈색 흰색 아이보리': 389, '흰색 흰색 갈색': 390, '황색 흰색 아이보리 흰색': 391, '갈색 흰색 아이보리 갈색': 392, '검정색 회색 고등어': 393, '황색 검정색 회색': 394, '검정색 갈색 흰색 노랑색 회색': 395, '황색 갈색 갈색 검정색': 396, '베이지 갈색 검정색': 397, '갈색 노랑색 갈색': 398, '흰색 아이보리 아이보리': 399, '흰색 아이보리 주황색 갈색': 400, '흰색 아이보리 노랑색 갈색': 401, '아이보리 흰색 갈색 검정색': 402, '살구색 흰색 갈색': 403, '흰색 검정색 갈색 회색': 404, '갈색 회색 노랑색': 405, '흰색 갈색 회색 삼색': 406, '흰색 갈색 갈색 노랑색': 407, '아이보리 흰색 갈색': 408, '노랑색 흰색 황색': 409, '갈색 턱시도 턱시도': 410, '베이지 황색': 411, '흰색 흰색 아이보리 황색': 412, '황색 아이보리 회색': 413, '황색 흰색 아이보리 검정색': 414, '갈색 아이보리 검정색': 415, '회색 갈색 흰색 검정색': 416, '흰색 아이보리 황색 갈색 갈색': 417, '갈색 황색 갈색': 418, '흰색 검정색 검정색 황색': 419, '황색 회색 검정색': 420, '회색 흰색 황색': 421, '황색 회색 흰색': 422, '검정색 흰색 검정색': 423, '황색 황색 흰색 황색': 424, '주황색 노랑색': 425, '흰색 흰색 아이보리 황색 갈색': 426, '황색 갈색 갈색': 427, '황색 황색 갈색 흰색 아이보리 흰색': 428, '갈색 갈색 갈색 흰색': 429, '황색 갈색 흰색 아이보리 흰색': 430, '회색 흰색 아이보리 검정색': 431, '갈색 베이지 검정색': 432, '갈색 살구색 흰색': 433, '갈색 흰색 노랑색': 434, '검정색 황색 회색': 435, '베이지 갈색 흰색': 436, '흰색 아이보리 주황색': 437, '흰색 갈색 검정색 갈색': 438, '삼색 노랑색 고등어': 439, '흰색 흰색 아이보리 주황색': 440, '황색 갈색 황색': 441, '주황색 흰색 검정색': 442, '노랑색 회색 검정색': 443, '황색 갈색 흰색 아이보리 검정색': 444, '흰색 주황색 흰색 아이보리': 445, '회색 흰색 아이보리 흰색': 446, '흰색 주황색 회색': 447, '흰색 검정색 회색 고등어': 448, '흰색 노랑색 살구색': 449, '턱시도 턱시도 삼색 카오스': 450, '흰색 흰색 아이보리 노랑색 갈색': 451, '삼색 흰색 검정색 회색': 452, '주황색 노랑색 흰색': 453, '흰색 아이보리 베이지 흰색': 454, '주황색 갈색 흰색 아이보리': 455, '검정색 황색 갈색 흰색': 456, '고등어 턱시도 턱시도': 457, '검정색 노랑색 흰색 갈색': 458, '삼색 흰색 아이보리 갈색': 459, '주황색 갈색 흰색': 460, '회색 흰색 검정색 고등어': 461, '갈색 검정색 흰색 노랑색': 462, '고등어 흰색 회색': 463, '주황색 흰색 아이보리 흰색': 464, '회색 검정색 황색': 465, '검정색 갈색 흰색 카오스': 466, '검정색 베이지 갈색': 467, '황색 흰색 아이보리 갈색': 468, '턱시도 턱시도 노랑색': 469, '턱시도 턱시도 고등어': 470, '삼색 검정색 황색 흰색': 471, '회색 회색 갈색': 472, '삼색 갈색 흰색 검정색': 473, '회색 황색 흰색': 474, '갈색 주황색 흰색 아이보리': 475, '주황색 갈색 검정색': 476, '갈색 갈색 주황색': 477, '황색 검정색 검정색': 478, '황색 갈색 검정색 노랑색': 479, '황색 갈색 주황색 흰색': 480, '회색 주황색': 481, '검정색 갈색 흰색 아이보리 흰색': 482, '흰색 황색 갈색 검정색': 483, '흰색 아이보리 노랑색 흰색': 484, '검정색 회색 흰색 고등어': 485, '갈색 주황색 흰색 아이보리 흰색': 486, '삼색 고등어 노랑색': 487, '황색 금색': 488, '갈색 갈색 검정색 흰색': 489, '갈색 갈색 흰색 검정색': 490, '황색 갈색 갈색 흰색 검정색': 491, '갈색 황색 갈색 흰색': 492, '황색 베이지 검정색': 493, '갈색 검정색 흰색 회색': 494, '회색 갈색 고등어': 495, '삼색 노랑색 갈색 흰색 검정색': 496, '갈색 회색 흰색 검정색': 497, '카오스 고등어': 498, '아이보리 갈색 검정색': 499, '회색 회색 흰색': 500, '흰색 노랑색 노랑색': 501, '검정색 회색 고등어 흰색 턱시도 턱시도': 502, '회색 고등어 흰색 턱시도 턱시도': 503, '회색 갈색 흰색 아이보리': 504, '흰색 갈색 아이보리 검정색': 505, '베이지 갈색 갈색': 506, '갈색 검정색 아이보리': 507, '흰색 갈색 베이지': 508, '흰색 아이보리 황색 검정색': 509, '황색 갈색 노랑색 흰색': 510, '검정색 노랑색 검정색 노랑색': 511, '검정색 노랑색 노랑색': 512, '검정색 회색 검정색': 513, '흰색 베이지 회색 검정색': 514, '흰색 주황색 아이보리': 515, '갈색 고등어 턱시도 턱시도': 516, '흰색 검정색 노랑색 검정색': 517, '검정색 흰색 아이보리 흰색': 518, '노랑색 아이보리': 519, '살구색 갈색': 520, '살구색 회색': 521, '검정색 흰색 황색 갈색': 522, '흰색 아이보리 살구색': 523, '흰색 흰색 흰색 갈색': 524, '회색 검정색 검정색': 525, '흰색 주황색 갈색 검정색': 526, '주황색 황색': 527, '회색 흰색 아이보리 노랑색': 528, '검정색 회색 갈색 흰색': 529, '노랑색 갈색 검정색': 530, '흰색 노랑색 검정색 카오스': 531, '갈색 고등어 턱시도 흰색': 532, '노랑색 회색 흰색': 533, '흰색 주황색 갈색 갈색': 534, '흰색 아이보리 노랑색 회색 검정색': 535, '흰색 회색 검정색 검정색': 536, '흰색 아이보리 갈색 흰색': 537, 
    '살구색 흰색 아이보리': 538, '갈색 흰색 아이보리 흰색 갈색': 539, '회색 황색 갈색 흰색 검정색': 540, '아이보리 검정색 회색': 541, '흰색 고등어 턱시도 턱시도': 542, '베이지 주황색 갈색': 543, '검정색 흰색 갈색 황색': 544, '갈색 갈색 회색 흰색': 545, '갈색 베이지 흰색': 546, '갈색 황색 갈색 검정색': 547, '흰색 베이지 갈색': 548, '흰색 갈색 흰색 흰색 갈색': 549, '갈색 회색 베이지': 550, '베이지 회색 검정색': 551, '갈색 흰색 검정색 주황색': 552, '갈색 검정색 노랑색': 553, '흰색 검정색 흰색': 554, '황색 갈색 회색 검정색': 555, '갈색 검정색 회색 흰색': 556, '노랑색 갈색 갈색': 557, '주황색 검정색 주황색 검정색 흰색': 558, '갈색 턱시도': 559, '검정색 갈색 황색 갈색 흰색': 560, '황색 갈색 흰색 아이보리 노랑색': 561, '검정색 황색 갈색 흰색 고등어': 562, '검정색 황색 갈색 검정색 고등어': 563, '검정색 노랑색 흰색 아이보리 카오스': 564, '검정색 갈색 황색 갈색': 565, '황색 갈색 흰색 검정색 고등어': 566, '흰색 회색 검정색 노랑색': 567, '갈색 흰색 검정색 갈색': 568, '회색 금색 흰색 삼색': 569, '검정색 흰색 아이보리 주황색': 570, '노랑색 턱시도 턱시도': 571, '황색 살구색': 572, '검정색 갈색 회색 흰색': 573, '삼색 검정색 흰색 갈색': 574, '검정색 흰색 아이보리 갈색': 575, '갈색 황색 갈색 검정색 흰색': 576, '갈색 검정색 흰색 아이보리 흰색': 577, '황색 주황색': 578, '흰색 갈색 주황색 검정색': 579, '노랑색 금색': 580, '흰색 살구색 검정색': 581, '황색 갈색 흰색 아이보리 흰색 검정색': 582, '황색 황색 흰색': 583, '황색 갈색 황색 검정색 흰색': 584, '검정색 갈색 회색 고등어': 585, '흰색 아이보리 주황색 흰색': 586, '흰색 노랑색 주황색': 587, '삼색 황색 갈색': 588, '갈색 검정색 주황색 흰색': 589, '흰색 고등어 금색': 590, '고등어 금색': 591, '삼색 흰색 노랑색 검정색': 592, '회색 주황색 흰색 아이보리': 593, '주황색 흰색 아이보리 흰색 검정색': 594, '흰색 회색 갈색 검정색': 595, '베이지 흰색 아이보리': 596, '노랑색 고등어 턱시도 턱시도': 597, '회색 카오스': 598, '주황색 흰색 아이보리 갈색': 599, '턱시도 턱시도 삼색': 600, '갈색 검정색 갈색 흰색 아이보리': 601, '갈색 검정색 갈색 흰색 아이보리 흰색': 602, '흰색 회색 황색': 603, '흰색 회색 흰색 아이보리 갈색': 604, '흰색 황색 흰색 아이보리': 605, '노랑색 삼색 턱시도 턱시도': 606, '회색 검정색 베이지': 607, '노랑색 턱시도 턱시도 고등어': 608, '삼색 턱시도 턱시도': 609, '흰색 흰색 아이보리 갈색 검정색': 610, '회색 삼색': 611, '노랑색 고등어 흰색 검정색': 612, '노랑색 카오스 고등어': 613, '갈색 삼색 노랑색': 614, '갈색 주황색 황색': 615, '흰색 노랑색 턱시도 턱시도': 616, '흰색 검정색 흰색 갈색': 617, '갈색 황색 노랑색': 618, '검정색 황색 갈색 흰색 아이보리': 619, '주황색 황색 갈색': 620, '흰색 흰색 아이보리 주황색 갈색': 621, '흰색 아이보리 황색 흰색': 622, '회색 아이보리 황색': 623, '삼색 검정색 노랑색 흰색': 624, '베이지 베이지': 625, '검정색 주황색 흰색 아이보리': 626, '검정색 갈색 검정색 갈색 검정색': 627, '노랑색 삼색 고등어': 628, '주황색 흰색 황색 갈색': 629, '갈색 흰색 아이보리 갈색 검정색': 630, '회색 흰색 고등어': 631, '삼색 흰색 갈색 검정색': 632, '노랑색 흰색 턱시도 턱시도': 633, '고등어 흰색 검정색 갈색': 634, '검정색 갈색 회색 갈색': 635, '황색 갈색 검정색 흰색 아이보리': 636, '흰색 회색 턱시도 턱시도': 637, '카오스 검정색 갈색': 638, '아이보리 노랑색': 639}
    do_map = {'광주': 0, '경기': 1, '대구': 2, '인천': 3, '충남': 4, '서울': 5, '전북': 6, '전남': 7, '경남': 8, '부산': 9, '대전': 10, '울산': 11, '강원': 12, '충북': 13, '세종': 14, '경북': 15, '제주': 16}
    si_map={'남구': 0, '광산': 1, '수원': 2, '성남': 3, '안양': 4, '부천': 5, '수성': 6, '광명': 7, '평택': 8, '남양주': 9, '서구': 10, '안산': 11, '하남': 12, '아산': 13, '용산': 14, '전주': 15, '영광': 16, '함안': 17, '통영': 18, '완주': 19, '동작': 20, '강북': 21, '양천': 22, '영도': 23, '해운대': 24, '연제': 25, '남동': 26, '동구': 27, '중구': 28, '유성': 29, '달성': 30, '강릉': 31, '제천': 32, '청주': 33, '서산': 34, '남원': 35, '목포': 36, '창원3': 37, '세종': 38, '노원': 39, '증평': 40, '순천': 41, '구미': 42, '부평': 43, '원주': 44, '삼척': 45, '화성': 46, '나주': 47, '밀양': 48, '상주': 49, '영주': 50, '제주': 51, '창녕': 52, '강동': 53, '서초': 54, '관악': 55, '북구': 56, '파주': 57, '울주': 58, '고양': 59, '오산': 60, '시흥': 61, '군포': 62, '용인': 63, '창원2': 64, '이천': 65, '광주': 66, '횡성': 67, '정선': 68, '철원': 69, '충주': 70, '보은': 71, '공주': 72, '논산': 73, '예산': 74, '당진': 75, '구로': 76, '정읍': 77, '음성': 78, '무주': 79, '순창': 80, '고창': 81, '부안': 82, '여수': 83, '광양': 84, '담양': 85, '곡성': 86, '장성': 87, '영천': 88, '청도': 89, '진안': 90, '진주': 91, '고성': 92, '거창': 93, '성동': 94, '중랑': 95, '성북': 96, '강서': 97, '군산': 98, '부산진': 99, '동래': 100, '사하': 101, '금정': 102, '기장': 103, '달서': 104, '계양': 105, '대덕': 106, '의정부': 107, '동두천': 108, '구리': 109, '안성': 110, '김포': 111, '양주': 112, '포천': 113, '춘천': 114, '울진': 115, '보령': 116, '천안': 117, '영암': 118, '경주': 119, '청송': 120, '경산': 121, '문경': 122, '김해': 123, '거제': 124, '남해': 125, '창원1': 126, '송파': 127, '은평': 128, '수영': 129, '무안': 130, '포항': 131, '김천': 132, '마포': 133, '금산': 134, '예천': 135, '양평': 136, '영동': 137, '홍천': 138, '진천': 139, '금천': 140, '태안': 141, '양산': 142, '성주': 143, '함평': 144, '동대문': 145, '하동': 146, '영등포': 147, '강남': 148, '칠곡': 149, '양구': 150, '해남': 151, '신안': 152, '완도': 153, '옹진': 154, '홍성': 155, '울릉': 156, '양양': 157, '평창': 158, '속초': 159, '화순': 160, '단양': 161, '부여': 162, '인제': 163, '강진': 164, '익산': 165, '진도': 166, '사상': 167, '옥천': 168, '고흥': 169, '태백': 170, '종로': 171, '가평': 172, '광진': 173, '연수': 174, '산청': 175, '안동': 176, '강화': 177, '영월': 178, '의성': 179, '영양': 180, '영덕': 181, '고령': 182, '연천': 183, '청양': 184, '함양': 185, '서대문': 186, '사천': 187, '임실': 188, '합천': 189, '괴산': 190, '의왕': 191, '장수': 192, '계룡': 193, '의령': 194, '도봉': 195, '군위': 196, '과천': 197, '동해': 198, '화천': 199, '여주': 200, '서천': 201, '구례': 202, '김제': 203, '보성': 204, '봉화': 205, '미추홀': 206, '장흥': 207, '개별사업(TNR)': 208, '서울특별시': 209}
    loc_map = [
            (0, '광주 남구'), (1, '광주 광산'), (2, '경기 수원'), (3, '경기 성남'), (4, '경기 안양'), (5, '경기 부천'), (6, '대구 수성'), (7, '경기 광명'), (8, '경기 평택'), (9, '경기 남양주'), (10, '인천 서구'), (11, '경기 안산'), (12, '경기 하남'), (13, '충남 아산'), (14, '서울 용산'), (15, '전북 전주'), (16, '전남 영광'), (17, '경남 함안'), (18, '경남 통영'), (19, '전북 완주'), (20, '서울 동작'), (21, '서울 강북'), (22, '서울 양천'), (23, '부산 영도'), (24, '부산 남구'), (25, '부산 해운대'), (26, '부산 연제'), (27, '인천 남동'), (28, '대전 동구'), (29, '대전 중구'), (30, '대전 서구'), (31, '대전 유성'), (32, '대구 달성'), (33, '울산 중구'), (34, '강원 강릉'), (35, '충북 제천'), (36, '충북 청주'), (37, '충남 서산'), (38, '전북 남원'), (39, '전남 목포'), (40, '경남 창원3'), (41, '세종 세종'), (42, '서울 노원'), (43, '충북 증평'), (44, '전남 순천'), (45, '경북 구미'), (46, '인천 부평'), (47, '강원 원주'), (48, '강원 삼척'), (49, '경기 화성'), (50, '전남 나주'), (51, '경남 밀양'), (52, '경북 상주'), (53, '경북 영주'), (54, '울산 남구'), (55, '제주 제주'), (56, '경남 창녕'), (57, '서울 강동'), (58, '서울 서초'), (59, '서울 관악'), (60, '인천 중구'), (61, '대구 북구'), (62, '부산 북구'), (63, '광주 서구'), (64, '광주 북구'), (65, '경기 파주'), (66, '울산 동구'), (67, '울산 울주'), (68, '경기 고양'), (69, '경기 오산'), (70, '경기 시흥'), (71, '경기 군포'), (72, '경기 용인'), (73, '경남 창원2'), (74, '경기 이천'), (75, '경기 광주'), (76, '강원 횡성'), (77, '강원 정선'), (78, '강원 철원'), (79, '충북 충주'), (80, '충북 보은'), (81, '충남 공주'), (82, '충남 논산'), (83, '충남 예산'), (84, '충남 당진'), (85, '서울 구로'), (86, '전북 정읍'), (87, '충북 음성'), (88, '전북 무주'), (89, '전북 순창'), (90, '전북 고창'), (91, '전북 부안'), (92, '전남 여수'), (93, '전남 광양'), (94, '전남 담양'), (95, '전남 곡성'), (96, '전남 장성'), (97, '경북 영천'), (98, '경북 청도'), (99, '전북 진안'), (100, '경남 진주'), (101, '경남 고성'), (102, '경남 거창'), (103, '서울 성동'), (104, '서울 중랑'), (105, '서울 성북'), (106, '서울 강서'), (107, '전북 군산'), (108, '부산 부산진'), (109, '부산 동래'), (110, '부산 사하'), (111, '부산 금정'), (112, '부산 기장'), (113, '대구 남구'), (114, '대구 달서'), (115, '인천 계양'), (116, '대전 대덕'), (117, '경기 의정부'), (118, '경기 동두천'), (119, '경기 구리'), (120, '경기 안성'), (121, '경기 김포'), (122, '경기 양주'), (123, '경기 포천'), (124, '강원 춘천'), (125, '경북 울진'), (126, '충남 보령'), (127, '충남 천안'), (128, '전남 영암'), (129, '경북 경주'), (130, '경북 청송'), (131, '경북 경산'), (132, '경북 문경'), (133, '경남 김해'), (134, '경남 거제'), (135, '경남 남해'), (136, '경남 창원1'), (137, '서울 송파'), (138, '서울 은평'), (139, '부산 강서'), (140, '부산 수영'), (141, '전남 무안'), (142, '경북 포항'), (143, '인천 남구'), (144, '경북 김천'), (145, '서울 마포'), (146, '충남 금산'), (147, '경북 예천'), (148, '대구 서구'), (149, '경기 양평'), (150, '충북 영동'), (151, '강원 홍천'), (152, '충북 진천'), (153, '서울 금천'), (154, '충남 태안'), (155, '경남 양산'), (156, '경북 성주'), (157, '전남 함평'), (158, '서울 동대문'), (159, '경남 하동'), (160, '서울 영등포'), (161, '서울 강남'), (162, '부산 동구'), (163, '경북 칠곡'), (164, '강원 양구'), (165, '전남 해남'), (166, '전남 신안'), (167, '전남 완도'), (168, '인천 옹진'), (169, '충남 홍성'), (170, '경북 울릉'), (171, '강원 양양'), (172, '대구 동구'), (173, '강원 평창'), (174, '강원 속초'), (175, '전남 화순'), (176, '충북 단양'), (177, '충남 부여'), (178, '강원 인제'), (179, '전남 강진'), (180, '전북 익산'), (181, '전남 진도'), (182, '부산 사상'), (183, '충북 옥천'), (184, '전남 고흥'), (185, '강원 태백'), (186, '서울 종로'), (187, '경기 가평'), (188, '대구 중구'), (189, '서울 광진'), (190, '인천 연수'), (191, '울산 북구'), (192, '강원 고성'), (193, '부산 서구'), (194, '경남 산청'), (195, '인천 동구'), (196, '광주 동구'), (197, '경북 안동'), (198, '인천 강화'), (199, '강원 영월'), (200, '경북 의성'), (201, '경북 영양'), (202, '경북 영덕'), (203, '경북 고령'), (204, '경기 연천'), (205, '충남 청양'), (206, '경남 함양'), (207, '서울 서대문'), (208, '경남 사천'), (209, '전북 임실'), (210, '경남 합천'), (211, '충북 괴산'), (212, '경기 의왕'), (213, '서울 중구'), (214, '전북 장수'), (215, '충남 계룡'), (216, '경남 의령'), (217, '서울 도봉'), (218, '부산 중구'), (219, '경북 군위'), (220, '경기 과천'), (221, '강원 동해'), (222, '강원 화천'), (223, '경기 여주'), (224, '충남 서천'), (225, '전남 구례'), (226, '전북 김제'), (227, '전남 보성'), (228, '경북 봉화'), (229, '인천 미추홀'), (230, '전남 장흥'), (231, '서울 개별사업(TNR)'), (232, '서울 서울특별시')
        ]
    def dbreed(self,data): 
        if data == '푸들':
            return '품종견'
        if isinstance(data, str):
            temp = self.tokenizer.nouns(data)
            status = 0
            if len(temp)==0:
                return '믹스견'
            
            for i in temp:        
                if i in self.breed['믹스견']:
                    status =1

            if status == 0:
                return '품종견'
            else : # bread['믹스견']에 들어갔다가 나왔.
                if len(temp) >= 2:  # 단어 개수 2개 이상
                    return '품종 믹스견'
                else:               # 단어 개수 1개
                    if ('혼혈' in temp) or ('혼종' in temp) or ('혼합' in temp)  :
                        return '품종 믹스견'
                    else:  
                        return '믹스견' 
        else: return '믹스견'
            
    def cbreed(self,data):  
        if isinstance(data, str): # 문자열 일 경우
            temp = self.tokenizer.nouns(data)
            status = 0
            
            if len(temp)==0:
                return '한국 고양이'
            
            for i in temp:        
                if i in self.breed['한국 고양이']:
                    status =1

            if status == 0:
                if '믹스' in temp:
                    return '품종 믹스묘'
                else : 
                    return '품종묘'
            else :
                if '믹스' in temp:
                    return '품종 믹스묘'
                else :
                    return '한국 고양이'        
        else: return '한국 고양이'  # 문자열 x
    def get(self,request,*args,**kwargs):
        form = self.form_class()
        return render(request, self.template_name, {'form':form,'data':False})
    def post(self, request, *args, **kwargs):
        form = self.form_class(request.POST)
        
        if form.is_valid():
            
            sepcies = int(form.cleaned_data['species'])
            period = form.cleaned_data['period']
            gender = int(form.cleaned_data['gender'])
            neutering = int(form.cleaned_data['neutering'])
            colors = form.cleaned_data['colors'] 
            kinds = form.cleaned_data['kinds'] # 품종 분리
            location = form.cleaned_data['location']
            character  = int(form.cleaned_data['character'])
            age = int(form.cleaned_data['age'])
            health  = int(form.cleaned_data['health'])
            # 색분리
            color_result = ''
            if isinstance(colors,str):
                temp = self.tokenizer.nouns(colors)
                if len(temp) == 0:
                    color_result += 'unknown'
                for c in temp:
                    for key in self.color_map.keys():
                        if c in self.color_map[key]:
                            color_result += key + ' '
                if color_result == '':
                    color_result += 'unknown'
            else:
                color_result += 'unknown'
            color_result = self.color_dict[color_result.strip()]
            # 월 분리
            date = form.cleaned_data['date'] 
            date = date.month
            # 품종 분리
            if sepcies == 0:
                kinds = self.dbreed(kinds)
            else:
                kinds = self.cbreed(kinds)
            kinds = self.breed_map[kinds]
            
            # 도,시 분리
            locs = self.loc_map[int(location)][1].split();
            do = self.do_map[locs[0]]
            si = self.si_map[locs[1]]
            location = int(location)
            # 위도, 경도 받기
            latitude,longitude = self.latlng(location)
            # 사이즈 받기
            sizes = int(form.cleaned_data['sizes'])
            data = [sepcies,period,gender,neutering,color_result,kinds,location,character,health,age,date,do,si,latitude,longitude,sizes]
            result = self.predict(data)
            if result[0] == 1:
                result = '입양 가능성 높음'
            else:
                result = '입양 가능성 낮음'
            return render(request,self.template_name,{'result':result,'data':True})
        return render(request,self.template_name, {'form':form,'data':False})
    
 

    def latlng(self,data):
        with open('static/assets/security/security-keys.txt','r') as f:
            secrets = json.loads(f.read()) 
        api_url = "https://naveropenapi.apigw.ntruss.com/map-geocode/v2/geocode?query="
        api_id = secrets['api_id']
        api_secret = secrets['api_secret']

        url = api_url + parse.quote(self.loc_map[int(data)][1],encoding='UTF-8')
        request = Request(url)
        request.add_header('X-NCP-APIGW-API-KEY-ID',api_id)
        request.add_header('X-NCP-APIGW-API-KEY',api_secret)
        try:
            response = urlopen(request)
        except HTTPError as e:
            print('Http Error!')
            latitude = None
            longitude = None
        else:
            res_code = response.getcode()
            if res_code == 200:
                response_body = response.read().decode('utf-8')
                response_body = json.loads(response_body)   # json
                try:
                    if response_body['addresses'] == [] :
                        print("'result' not exist!")
                        latitude = None
                        longitude = None
                    else:
                        latitude = response_body['addresses'][0]['y']
                        longitude = response_body['addresses'][0]['x']
                        print("Success!")
                except KeyError as e:
                    print('key error')
                    latitude = None
                    longitude = None
            else:
                print('Response error code : %d' % rescode)
                latitude = None
                longitude = None
        latitude = float(latitude)
        longitude = float(longitude)
        return latitude,longitude
    def predict(self,data):
        model = joblib.load('static/assets/model/lgbm_model2.pkl')
        data= np.array(data).reshape((1,-1))
        result = np.argmax(model.predict(data), axis=1)
        return result
